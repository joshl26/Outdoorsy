const express = require("express");
const router = express.Router({ mergeParams: true });
const { validateReview, isLoggedIn, isReviewAuthor } = require("../middleware");
// const Campground = require('../models/campground');
// const Review = require('../models/review');
const reviews = require("../controllers/reviews");
const ExpressError = require("../utils/ExpressError");
const catchAsync = require("../utils/catchAsync");

/**
 * @swagger
 *  components:
 *   schemas:
 *    Reviews:
 *      type: object
 *      required:
 *      - rating
 *      - body
 *      properties:
 *          _id:
 *              type: string
 *              format: uuid
 *              description: The id auto generated by mongoose for the campsite
 *          title:
 *              type: string
 *              description: The title of the campsite
 *          location:
 *              type: string
 *              description: The location of the campsite
 *          price:
 *              type: number
 *              format: float
 *              description: The price for the campsite
 *          description:
 *              type: string
 *              description: The description of the campsite
 *          images:
 *              type: array
 *              description: Array of image objects
 *              items:
 *                  type: object
 *                  properties:
 *                      _id:
 *                          type: string
 *                          format: uuid
 *                          description: The id auto generated by mongoose for the campground
 *                      url:
 *                          type: string
 *                          format: uri
 *                          description: The url of the image
 *                      filename:
 *                          type: string
 *                          description: The filename of the image
 *          author:
 *              type: string
 *              format: uuid
 *              description: ID of person that created the review
 *          __v:
 *              type: number
 *              format: int32
 *              description: Version of the campsite review, starting at 0 and incremented by +1 with each change saved
 *
 */

/**
 * @swagger
 * /reviews/:
 *   post:
 *     tags:
 *     - Reviews
 *     summary: Create a JSONPlaceholder user.
 *     responses:
 *       201:
 *         description: Created
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: The user ID.
 *                       example: 0
 *                     name:
 *                       type: string
 *                       description: The user's name.
 *                       example: Leanne Graham
 */
router.post("/", isLoggedIn, validateReview, catchAsync(reviews.createReview));

router.delete(
  "/:reviewId",
  isLoggedIn,
  isReviewAuthor,
  catchAsync(reviews.deleteReview)
);

module.exports = router;
