const express = require("express");
const router = express.Router({ mergeParams: true });
const { validateReview, isLoggedIn, isReviewAuthor } = require("../middleware");
// const Campground = require('../models/campground');
// const Review = require('../models/review');
const reviews = require("../controllers/reviews");
const ExpressError = require("../utils/ExpressError");
const catchAsync = require("../utils/catchAsync");

/**
 * @swagger
 *  components:
 *   schemas:
 *    Reviews:
 *      type: object
 *      required:
 *      - rating
 *      - body
 *      properties:
 *          _id:
 *              type: string
 *              format: uuid
 *              description: The id auto generated by mongoose for the campsite
 *          title:
 *              type: string
 *              description: The title of the campsite
 *          location:
 *              type: string
 *              description: The location of the campsite
 *          price:
 *              type: number
 *              format: float
 *              description: The price for the campsite
 *          description:
 *              type: string
 *              description: The description of the campsite
 *          images:
 *              type: array
 *              description: Array of image objects
 *              items:
 *                  type: object
 *                  properties:
 *                      _id:
 *                          type: string
 *                          format: uuid
 *                          description: The id auto generated by mongoose for the campground
 *                      url:
 *                          type: string
 *                          format: uri
 *                          description: The url of the image
 *                      filename:
 *                          type: string
 *                          description: The filename of the image
 *          author:
 *              type: string
 *              format: uuid
 *              description: ID of person that created the review
 *          __v:
 *              type: number
 *              format: int32
 *              description: Version of the campsite review, starting at 0 and incremented by +1 with each change saved
 *
 */

/**
 * @swagger
 * /campgrounds/{id}/reviews/:
 *   post:
 *     tags:
 *     - Reviews
 *     summary: Create a new review
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Numeric ID of the Campground record to edit
 *         example: 646d919387d1d5003b83728c
 *         schema:
 *            type: string
 *     responses:
 *       201:
 *         description: Create a new review
 */
router.post("/", isLoggedIn, validateReview, catchAsync(reviews.createReview));

/**
 * @swagger
 * /campgrounds/{id}/reviews/{reviewId}/:
 *   delete:
 *     tags:
 *     - Reviews
 *     summary: Delete a review
 *     description: Delete a review
 *     parameters:
 *        - in: path
 *          schema:
 *              type: object
 *          required:
 *              -id
 *              -reviewId
 *          properties:
 *              id:
 *                  type: string
 *              reviewId:
 *                  type: string
 *          description: string id of review to delete
 *     responses:
 *       200:
 *         description: Delete a review
 */

router.delete(
  "/:reviewId",
  isLoggedIn,
  isReviewAuthor,
  catchAsync(reviews.deleteReview)
);

module.exports = router;
